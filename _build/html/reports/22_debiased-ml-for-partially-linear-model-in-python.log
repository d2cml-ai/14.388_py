Traceback (most recent call last):
  File "C:\Users\User\anaconda3\lib\site-packages\jupyter_cache\executors\utils.py", line 51, in single_nb_execution
    executenb(
  File "C:\Users\User\anaconda3\lib\site-packages\nbclient\client.py", line 1204, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "C:\Users\User\anaconda3\lib\site-packages\nbclient\util.py", line 84, in wrapped
    return just_run(coro(*args, **kwargs))
  File "C:\Users\User\anaconda3\lib\site-packages\nbclient\util.py", line 62, in just_run
    return loop.run_until_complete(coro)
  File "C:\Users\User\anaconda3\lib\asyncio\base_events.py", line 647, in run_until_complete
    return future.result()
  File "C:\Users\User\anaconda3\lib\site-packages\nbclient\client.py", line 663, in async_execute
    await self.async_execute_cell(
  File "C:\Users\User\anaconda3\lib\site-packages\nbclient\client.py", line 965, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "C:\Users\User\anaconda3\lib\site-packages\nbclient\client.py", line 862, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
print( f'\n length of y is \n {y.size}' )
print( f'\n num features x is \n {x.shape[ 1 ]}' )

print( "\n Naive OLS that uses all features w/o cross-fitting \n" )
lres = sm.OLS( y , add_constant(np.concatenate( ( d , x ) , axis = 1 ) )  ).fit().summary2().tables[ 1 ].iloc[ 1, 0:2 ]
print( f'\n coef (se) = {lres[ 0 ]} ({lres[ 1 ]})' )




#DML with OLS
print( "\n DML with OLS w/o feature selection \n" )

def dreg(x,d):
    result = standard_skl_model( linear_model.Lasso( alpha = 0 , random_state = 0 )).fit( x, d )
    return result

def yreg(x,y):
    result = standard_skl_model( linear_model.Lasso( alpha = 0 ,  random_state = 0 ) ).fit( x, y )
    return result

DML2_ols = DML2_for_PLM(x, d, y, dreg, yreg, 10 )




# DML with LASSO
print( "\n DML with Lasso \n" )
def dreg(x,d):
    result = rlasso_sklearn( post = False ).fit( x , d )
    return result

def yreg(x,y):
    result = rlasso_sklearn( post = False ).fit( x , y )
    return result

DML2_lasso = DML2_for_PLM( x , d , y , dreg , yreg , 10 )




print( "\n DML with Random Forest \n" )

#DML with cross-validated Lasso:
def dreg( x , d ):
    result = RandomForestRegressor( random_state = 0 , n_estimators = 500 , max_features = 20 , n_jobs = 4 , min_samples_leaf = 5 ).fit( x, d )
    return result

def yreg( x , y ):
    result = RandomForestRegressor( random_state = 0 , n_estimators = 500 , max_features = 20 , n_jobs = 4 , min_samples_leaf = 5 ).fit( x, y )
    return result

DML2_RF = DML2_for_PLM( x , d , y , dreg , yreg , 2 )   # set to 2 due to computation time



#DML with Lasso:
print( "\n DML with Lasso/Random Forest \n" )
def dreg( x , d ):
    result = rlasso_sklearn( post = False ).fit( x , d )
    return result

def yreg( x , y ):
    result = RandomForestRegressor( random_state = 0 , n_estimators = 500 , max_features = 20 , n_jobs = 4 , min_samples_leaf = 5 ).fit( x, y )
    return result

DML2_RF = DML2_for_PLM( x , d , y , dreg , yreg , 2 )   # set to 2 due to computation time
------------------

[1;31m---------------------------------------------------------------------------[0m
[1;31mValueError[0m                                Traceback (most recent call last)
Input [1;32mIn [7][0m, in [0;36m<cell line: 37>[1;34m()[0m
[0;32m     34[0m     result [38;5;241m=[39m rlasso_sklearn( post [38;5;241m=[39m [38;5;28;01mFalse[39;00m )[38;5;241m.[39mfit( x , y )
[0;32m     35[0m     [38;5;28;01mreturn[39;00m result
[1;32m---> 37[0m DML2_lasso [38;5;241m=[39m [43mDML2_for_PLM[49m[43m([49m[43m [49m[43mx[49m[43m [49m[43m,[49m[43m [49m[43md[49m[43m [49m[43m,[49m[43m [49m[43my[49m[43m [49m[43m,[49m[43m [49m[43mdreg[49m[43m [49m[43m,[49m[43m [49m[43myreg[49m[43m [49m[43m,[49m[43m [49m[38;5;241;43m10[39;49m[43m [49m[43m)[49m
[0;32m     42[0m [38;5;28mprint[39m( [38;5;124m"[39m[38;5;130;01m\n[39;00m[38;5;124m DML with Random Forest [39m[38;5;130;01m\n[39;00m[38;5;124m"[39m )
[0;32m     44[0m [38;5;66;03m#DML with cross-validated Lasso:[39;00m

Input [1;32mIn [4][0m, in [0;36mDML2_for_PLM[1;34m(x, d, y, dreg, yreg, nfold)[0m
[0;32m     33[0m yfit [38;5;241m=[39m yreg(x[[38;5;241m~[39mmask,], y[[38;5;241m~[39mmask,])
[0;32m     35[0m [38;5;66;03m# predict estimates using the [39;00m
[1;32m---> 36[0m dhat [38;5;241m=[39m [43mdfit[49m[38;5;241;43m.[39;49m[43mpredict[49m[43m([49m[43m [49m[43mx[49m[43m[[49m[43mmask[49m[43m,[49m[43m][49m[43m [49m[43m)[49m
[0;32m     37[0m yhat [38;5;241m=[39m yfit[38;5;241m.[39mpredict( x[mask,] )
[0;32m     39[0m [38;5;66;03m# save errors  [39;00m

Input [1;32mIn [3][0m, in [0;36mrlasso_sklearn.predict[1;34m(self, X)[0m
[0;32m     12[0m [38;5;28;01mdef[39;00m [38;5;21mpredict[39m( [38;5;28mself[39m , X ):
[0;32m     14[0m     beta [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39mrlasso_model[38;5;241m.[39mest[[38;5;124m'[39m[38;5;124mcoefficients[39m[38;5;124m'[39m][38;5;241m.[39mto_numpy()
[1;32m---> 15[0m     prediction [38;5;241m=[39m ( [43madd_constant[49m[43m([49m[43m [49m[43mX[49m[43m [49m[43m)[49m[43m [49m[38;5;241;43m@[39;49m[43m [49m[43mbeta[49m )[38;5;241m.[39mflatten()
[0;32m     17[0m     [38;5;28;01mreturn[39;00m prediction

[1;31mValueError[0m: matmul: Input operand 1 has a mismatch in its core dimension 0, with gufunc signature (n?,k),(k,m?)->(n?,m?) (size 61 is different from 60)
ValueError: matmul: Input operand 1 has a mismatch in its core dimension 0, with gufunc signature (n?,k),(k,m?)->(n?,m?) (size 61 is different from 60)

