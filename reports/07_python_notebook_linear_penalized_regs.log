Traceback (most recent call last):
  File "C:\Users\User\anaconda3\lib\site-packages\jupyter_cache\executors\utils.py", line 51, in single_nb_execution
    executenb(
  File "C:\Users\User\anaconda3\lib\site-packages\nbclient\client.py", line 1204, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "C:\Users\User\anaconda3\lib\site-packages\nbclient\util.py", line 84, in wrapped
    return just_run(coro(*args, **kwargs))
  File "C:\Users\User\anaconda3\lib\site-packages\nbclient\util.py", line 62, in just_run
    return loop.run_until_complete(coro)
  File "C:\Users\User\anaconda3\lib\asyncio\base_events.py", line 647, in run_until_complete
    return future.result()
  File "C:\Users\User\anaconda3\lib\site-packages\nbclient\client.py", line 663, in async_execute
    await self.async_execute_cell(
  File "C:\Users\User\anaconda3\lib\site-packages\nbclient\client.py", line 965, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "C:\Users\User\anaconda3\lib\site-packages\nbclient\client.py", line 862, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
# Reshaping Y variable
Y_vec = Y.reshape( Y.size, 1)

# Scalar distribution
scaler = StandardScaler()
scaler.fit( Y_vec )
std_Y = scaler.transform( Y_vec )

# Regressions
fit_lasso_cv = LassoCV(cv = 10 , random_state = 0 , normalize = True ).fit( X, std_Y )
fit_ridge = ElasticNetCV( cv = 10 , normalize = True , random_state = 0 , l1_ratio = 0.0001 ).fit( X, std_Y )
fit_elnet = ElasticNetCV( cv = 10 , normalize = True , random_state = 0 , l1_ratio = 0.5, max_iter = 100000 ).fit( X, std_Y )

# Predictions
yhat_lasso_cv = scaler.inverse_transform( fit_lasso_cv.predict( X ) )
yhat_ridge = scaler.inverse_transform( fit_ridge.predict( X ) )
yhat_elnet = scaler.inverse_transform( fit_elnet.predict( X ) )
------------------

[1;31m---------------------------------------------------------------------------[0m
[1;31mValueError[0m                                Traceback (most recent call last)
Input [1;32mIn [4][0m, in [0;36m<cell line: 15>[1;34m()[0m
[0;32m     12[0m fit_elnet [38;5;241m=[39m ElasticNetCV( cv [38;5;241m=[39m [38;5;241m10[39m , normalize [38;5;241m=[39m [38;5;28;01mTrue[39;00m , random_state [38;5;241m=[39m [38;5;241m0[39m , l1_ratio [38;5;241m=[39m [38;5;241m0.5[39m, max_iter [38;5;241m=[39m [38;5;241m100000[39m )[38;5;241m.[39mfit( X, std_Y )
[0;32m     14[0m [38;5;66;03m# Predictions[39;00m
[1;32m---> 15[0m yhat_lasso_cv [38;5;241m=[39m [43mscaler[49m[38;5;241;43m.[39;49m[43minverse_transform[49m[43m([49m[43m [49m[43mfit_lasso_cv[49m[38;5;241;43m.[39;49m[43mpredict[49m[43m([49m[43m [49m[43mX[49m[43m [49m[43m)[49m[43m [49m[43m)[49m
[0;32m     16[0m yhat_ridge [38;5;241m=[39m scaler[38;5;241m.[39minverse_transform( fit_ridge[38;5;241m.[39mpredict( X ) )
[0;32m     17[0m yhat_elnet [38;5;241m=[39m scaler[38;5;241m.[39minverse_transform( fit_elnet[38;5;241m.[39mpredict( X ) )

File [1;32m~\anaconda3\lib\site-packages\sklearn\preprocessing\_data.py:1016[0m, in [0;36mStandardScaler.inverse_transform[1;34m(self, X, copy)[0m
[0;32m   1013[0m check_is_fitted([38;5;28mself[39m)
[0;32m   1015[0m copy [38;5;241m=[39m copy [38;5;28;01mif[39;00m copy [38;5;129;01mis[39;00m [38;5;129;01mnot[39;00m [38;5;28;01mNone[39;00m [38;5;28;01melse[39;00m [38;5;28mself[39m[38;5;241m.[39mcopy
[1;32m-> 1016[0m X [38;5;241m=[39m [43mcheck_array[49m[43m([49m
[0;32m   1017[0m [43m    [49m[43mX[49m[43m,[49m
[0;32m   1018[0m [43m    [49m[43maccept_sparse[49m[38;5;241;43m=[39;49m[38;5;124;43m"[39;49m[38;5;124;43mcsr[39;49m[38;5;124;43m"[39;49m[43m,[49m
[0;32m   1019[0m [43m    [49m[43mcopy[49m[38;5;241;43m=[39;49m[43mcopy[49m[43m,[49m
[0;32m   1020[0m [43m    [49m[43mestimator[49m[38;5;241;43m=[39;49m[38;5;28;43mself[39;49m[43m,[49m
[0;32m   1021[0m [43m    [49m[43mdtype[49m[38;5;241;43m=[39;49m[43mFLOAT_DTYPES[49m[43m,[49m
[0;32m   1022[0m [43m    [49m[43mforce_all_finite[49m[38;5;241;43m=[39;49m[38;5;124;43m"[39;49m[38;5;124;43mallow-nan[39;49m[38;5;124;43m"[39;49m[43m,[49m
[0;32m   1023[0m [43m[49m[43m)[49m
[0;32m   1025[0m [38;5;28;01mif[39;00m sparse[38;5;241m.[39missparse(X):
[0;32m   1026[0m     [38;5;28;01mif[39;00m [38;5;28mself[39m[38;5;241m.[39mwith_mean:

File [1;32m~\anaconda3\lib\site-packages\sklearn\utils\validation.py:769[0m, in [0;36mcheck_array[1;34m(array, accept_sparse, accept_large_sparse, dtype, order, copy, force_all_finite, ensure_2d, allow_nd, ensure_min_samples, ensure_min_features, estimator)[0m
[0;32m    767[0m     [38;5;66;03m# If input is 1D raise error[39;00m
[0;32m    768[0m     [38;5;28;01mif[39;00m array[38;5;241m.[39mndim [38;5;241m==[39m [38;5;241m1[39m:
[1;32m--> 769[0m         [38;5;28;01mraise[39;00m [38;5;167;01mValueError[39;00m(
[0;32m    770[0m             [38;5;124m"[39m[38;5;124mExpected 2D array, got 1D array instead:[39m[38;5;130;01m\n[39;00m[38;5;124marray=[39m[38;5;132;01m{}[39;00m[38;5;124m.[39m[38;5;130;01m\n[39;00m[38;5;124m"[39m
[0;32m    771[0m             [38;5;124m"[39m[38;5;124mReshape your data either using array.reshape(-1, 1) if [39m[38;5;124m"[39m
[0;32m    772[0m             [38;5;124m"[39m[38;5;124myour data has a single feature or array.reshape(1, -1) [39m[38;5;124m"[39m
[0;32m    773[0m             [38;5;124m"[39m[38;5;124mif it contains a single sample.[39m[38;5;124m"[39m[38;5;241m.[39mformat(array)
[0;32m    774[0m         )
[0;32m    776[0m [38;5;66;03m# make sure we actually converted to numeric:[39;00m
[0;32m    777[0m [38;5;28;01mif[39;00m dtype_numeric [38;5;129;01mand[39;00m array[38;5;241m.[39mdtype[38;5;241m.[39mkind [38;5;129;01min[39;00m [38;5;124m"[39m[38;5;124mOUSV[39m[38;5;124m"[39m:

[1;31mValueError[0m: Expected 2D array, got 1D array instead:
array=[-0.43745947 -0.59186593  1.38960367  0.19695727 -0.72140871 -0.008148
 -0.48288066 -0.19555518  1.1101015  -0.15891172 -0.40338781 -0.83580092
  1.65452494 -0.86382385 -0.05893351  0.26940271 -0.21318917  0.12122308
  1.8468142  -0.3853857  -0.76998967  0.02788572 -0.29837036  1.77329543
  0.47697955 -0.03712551 -0.20301095 -0.15535698 -0.44471457  1.31961465
 -0.02357997 -0.7914598  -0.21217249 -0.35056442  0.17784633 -0.4465847
 -0.06725965 -0.80247032 -1.06358467 -0.91083133  0.20857908 -0.34692
  1.51974224 -0.66685933 -0.28948946  0.04293227  0.77335026  0.5556554
 -0.22005217  0.9114548   1.11859346 -0.1254961   1.29756213 -0.09389315
 -0.28839783  1.07146097 -0.40757861 -0.05395183 -0.89426441 -0.27479927
  0.93998271 -0.13322291  0.16386079 -0.29125599 -0.27833954  0.93579628
 -0.22215978 -0.28893491 -0.05909393 -0.52953796 -0.68053271  0.92537338
 -0.25810801 -0.35107914 -0.35276617 -0.60441047  0.66756227  0.02555417
  1.01078422  0.51055795 -0.29616263 -0.37394222 -0.90571504  0.15703872
  0.00283707 -0.16769632 -0.46315014 -0.51855152 -0.0571714  -0.17115839
 -0.57814557  0.27808922 -1.20622972  2.05642993 -0.4062971  -0.1685805
  1.22422931 -0.60937424 -0.43936032 -0.75517084].
Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample.
ValueError: Expected 2D array, got 1D array instead:
array=[-0.43745947 -0.59186593  1.38960367  0.19695727 -0.72140871 -0.008148
 -0.48288066 -0.19555518  1.1101015  -0.15891172 -0.40338781 -0.83580092
  1.65452494 -0.86382385 -0.05893351  0.26940271 -0.21318917  0.12122308
  1.8468142  -0.3853857  -0.76998967  0.02788572 -0.29837036  1.77329543
  0.47697955 -0.03712551 -0.20301095 -0.15535698 -0.44471457  1.31961465
 -0.02357997 -0.7914598  -0.21217249 -0.35056442  0.17784633 -0.4465847
 -0.06725965 -0.80247032 -1.06358467 -0.91083133  0.20857908 -0.34692
  1.51974224 -0.66685933 -0.28948946  0.04293227  0.77335026  0.5556554
 -0.22005217  0.9114548   1.11859346 -0.1254961   1.29756213 -0.09389315
 -0.28839783  1.07146097 -0.40757861 -0.05395183 -0.89426441 -0.27479927
  0.93998271 -0.13322291  0.16386079 -0.29125599 -0.27833954  0.93579628
 -0.22215978 -0.28893491 -0.05909393 -0.52953796 -0.68053271  0.92537338
 -0.25810801 -0.35107914 -0.35276617 -0.60441047  0.66756227  0.02555417
  1.01078422  0.51055795 -0.29616263 -0.37394222 -0.90571504  0.15703872
  0.00283707 -0.16769632 -0.46315014 -0.51855152 -0.0571714  -0.17115839
 -0.57814557  0.27808922 -1.20622972  2.05642993 -0.4062971  -0.1685805
  1.22422931 -0.60937424 -0.43936032 -0.75517084].
Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample.

