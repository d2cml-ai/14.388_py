Traceback (most recent call last):
  File "C:\Users\User\anaconda3\lib\site-packages\jupyter_cache\executors\utils.py", line 51, in single_nb_execution
    executenb(
  File "C:\Users\User\anaconda3\lib\site-packages\nbclient\client.py", line 1204, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "C:\Users\User\anaconda3\lib\site-packages\nbclient\util.py", line 84, in wrapped
    return just_run(coro(*args, **kwargs))
  File "C:\Users\User\anaconda3\lib\site-packages\nbclient\util.py", line 62, in just_run
    return loop.run_until_complete(coro)
  File "C:\Users\User\anaconda3\lib\asyncio\base_events.py", line 647, in run_until_complete
    return future.result()
  File "C:\Users\User\anaconda3\lib\site-packages\nbclient\client.py", line 663, in async_execute
    await self.async_execute_cell(
  File "C:\Users\User\anaconda3\lib\site-packages\nbclient\client.py", line 965, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "C:\Users\User\anaconda3\lib\site-packages\nbclient\client.py", line 862, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
# Reshaping Y variable
Y_vec = Y.reshape( Y.size, 1)

# Scalar distribution
scaler = StandardScaler()
scaler.fit( Y_vec )
std_Y = scaler.transform( Y_vec )

# Regressions
fit_lasso_cv = LassoCV(cv = 10 , random_state = 0 , normalize = True ).fit( X, std_Y )
fit_ridge = ElasticNetCV( cv = 10 , normalize = True , random_state = 0 , l1_ratio = 0.0001 ).fit( X, std_Y )
fit_elnet = ElasticNetCV( cv = 10 , normalize = True , random_state = 0 , l1_ratio = 0.5, max_iter = 100000 ).fit( X, std_Y )

# Predictions
yhat_lasso_cv = scaler.inverse_transform( fit_lasso_cv.predict( X ) )
yhat_ridge = scaler.inverse_transform( fit_ridge.predict( X ) )
yhat_elnet = scaler.inverse_transform( fit_elnet.predict( X ) )
------------------

[1;31m---------------------------------------------------------------------------[0m
[1;31mValueError[0m                                Traceback (most recent call last)
Input [1;32mIn [4][0m, in [0;36m<cell line: 15>[1;34m()[0m
[0;32m     12[0m fit_elnet [38;5;241m=[39m ElasticNetCV( cv [38;5;241m=[39m [38;5;241m10[39m , normalize [38;5;241m=[39m [38;5;28;01mTrue[39;00m , random_state [38;5;241m=[39m [38;5;241m0[39m , l1_ratio [38;5;241m=[39m [38;5;241m0.5[39m, max_iter [38;5;241m=[39m [38;5;241m100000[39m )[38;5;241m.[39mfit( X, std_Y )
[0;32m     14[0m [38;5;66;03m# Predictions[39;00m
[1;32m---> 15[0m yhat_lasso_cv [38;5;241m=[39m [43mscaler[49m[38;5;241;43m.[39;49m[43minverse_transform[49m[43m([49m[43m [49m[43mfit_lasso_cv[49m[38;5;241;43m.[39;49m[43mpredict[49m[43m([49m[43m [49m[43mX[49m[43m [49m[43m)[49m[43m [49m[43m)[49m
[0;32m     16[0m yhat_ridge [38;5;241m=[39m scaler[38;5;241m.[39minverse_transform( fit_ridge[38;5;241m.[39mpredict( X ) )
[0;32m     17[0m yhat_elnet [38;5;241m=[39m scaler[38;5;241m.[39minverse_transform( fit_elnet[38;5;241m.[39mpredict( X ) )

File [1;32m~\anaconda3\lib\site-packages\sklearn\preprocessing\_data.py:1016[0m, in [0;36mStandardScaler.inverse_transform[1;34m(self, X, copy)[0m
[0;32m   1013[0m check_is_fitted([38;5;28mself[39m)
[0;32m   1015[0m copy [38;5;241m=[39m copy [38;5;28;01mif[39;00m copy [38;5;129;01mis[39;00m [38;5;129;01mnot[39;00m [38;5;28;01mNone[39;00m [38;5;28;01melse[39;00m [38;5;28mself[39m[38;5;241m.[39mcopy
[1;32m-> 1016[0m X [38;5;241m=[39m [43mcheck_array[49m[43m([49m
[0;32m   1017[0m [43m    [49m[43mX[49m[43m,[49m
[0;32m   1018[0m [43m    [49m[43maccept_sparse[49m[38;5;241;43m=[39;49m[38;5;124;43m"[39;49m[38;5;124;43mcsr[39;49m[38;5;124;43m"[39;49m[43m,[49m
[0;32m   1019[0m [43m    [49m[43mcopy[49m[38;5;241;43m=[39;49m[43mcopy[49m[43m,[49m
[0;32m   1020[0m [43m    [49m[43mestimator[49m[38;5;241;43m=[39;49m[38;5;28;43mself[39;49m[43m,[49m
[0;32m   1021[0m [43m    [49m[43mdtype[49m[38;5;241;43m=[39;49m[43mFLOAT_DTYPES[49m[43m,[49m
[0;32m   1022[0m [43m    [49m[43mforce_all_finite[49m[38;5;241;43m=[39;49m[38;5;124;43m"[39;49m[38;5;124;43mallow-nan[39;49m[38;5;124;43m"[39;49m[43m,[49m
[0;32m   1023[0m [43m[49m[43m)[49m
[0;32m   1025[0m [38;5;28;01mif[39;00m sparse[38;5;241m.[39missparse(X):
[0;32m   1026[0m     [38;5;28;01mif[39;00m [38;5;28mself[39m[38;5;241m.[39mwith_mean:

File [1;32m~\anaconda3\lib\site-packages\sklearn\utils\validation.py:769[0m, in [0;36mcheck_array[1;34m(array, accept_sparse, accept_large_sparse, dtype, order, copy, force_all_finite, ensure_2d, allow_nd, ensure_min_samples, ensure_min_features, estimator)[0m
[0;32m    767[0m     [38;5;66;03m# If input is 1D raise error[39;00m
[0;32m    768[0m     [38;5;28;01mif[39;00m array[38;5;241m.[39mndim [38;5;241m==[39m [38;5;241m1[39m:
[1;32m--> 769[0m         [38;5;28;01mraise[39;00m [38;5;167;01mValueError[39;00m(
[0;32m    770[0m             [38;5;124m"[39m[38;5;124mExpected 2D array, got 1D array instead:[39m[38;5;130;01m\n[39;00m[38;5;124marray=[39m[38;5;132;01m{}[39;00m[38;5;124m.[39m[38;5;130;01m\n[39;00m[38;5;124m"[39m
[0;32m    771[0m             [38;5;124m"[39m[38;5;124mReshape your data either using array.reshape(-1, 1) if [39m[38;5;124m"[39m
[0;32m    772[0m             [38;5;124m"[39m[38;5;124myour data has a single feature or array.reshape(1, -1) [39m[38;5;124m"[39m
[0;32m    773[0m             [38;5;124m"[39m[38;5;124mif it contains a single sample.[39m[38;5;124m"[39m[38;5;241m.[39mformat(array)
[0;32m    774[0m         )
[0;32m    776[0m [38;5;66;03m# make sure we actually converted to numeric:[39;00m
[0;32m    777[0m [38;5;28;01mif[39;00m dtype_numeric [38;5;129;01mand[39;00m array[38;5;241m.[39mdtype[38;5;241m.[39mkind [38;5;129;01min[39;00m [38;5;124m"[39m[38;5;124mOUSV[39m[38;5;124m"[39m:

[1;31mValueError[0m: Expected 2D array, got 1D array instead:
array=[-0.57206124 -0.46232086 -0.95177557 -0.17954602 -0.23016203 -0.48064428
  0.17791371 -0.72104959 -0.98730111  1.69509342  1.91005898  2.32338408
 -0.53794846  0.19718145  2.22194574  0.3715517  -0.53988794 -0.93331755
 -0.5638444  -0.19791457  1.79839052  0.61335544 -0.16993255 -1.22917004
  0.43506606 -0.47103644  1.68027216  0.71454192 -0.76357981 -0.65425971
 -0.02160074  2.7787538  -0.51550822  0.20360801  0.05263738 -0.0869751
 -0.48082775 -0.45379466  0.06747317 -0.68305095  0.13468495  1.0619599
 -0.45133268  0.06690304 -0.20400081 -0.04343973 -1.41555967  0.25109339
 -0.67997199  0.74021758 -0.38802517  0.77610058 -0.25891764 -0.54695971
 -1.08446389 -0.36615456 -0.47211447  1.87404364  1.39257513 -0.16230874
 -0.49177139  0.57589428 -0.31462395 -0.19382266 -0.55550508 -0.76775509
  0.68599124 -0.43454987 -0.90911658 -1.12203732  2.47890561  0.53350142
 -0.79747873  0.18813943 -0.53301349 -0.73949795  0.1822714  -0.25981235
 -0.86990325  0.72952474  0.16744712  2.01759315 -0.67869269  0.22068826
 -0.63022185 -0.33428973 -0.8975322  -0.32401759  0.98462339 -1.03887688
 -0.26133802 -0.81801884 -0.01595512  0.56248602  0.6516571  -0.43681309
 -0.13139792 -1.46866513 -0.22072119  0.68865769].
Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample.
ValueError: Expected 2D array, got 1D array instead:
array=[-0.57206124 -0.46232086 -0.95177557 -0.17954602 -0.23016203 -0.48064428
  0.17791371 -0.72104959 -0.98730111  1.69509342  1.91005898  2.32338408
 -0.53794846  0.19718145  2.22194574  0.3715517  -0.53988794 -0.93331755
 -0.5638444  -0.19791457  1.79839052  0.61335544 -0.16993255 -1.22917004
  0.43506606 -0.47103644  1.68027216  0.71454192 -0.76357981 -0.65425971
 -0.02160074  2.7787538  -0.51550822  0.20360801  0.05263738 -0.0869751
 -0.48082775 -0.45379466  0.06747317 -0.68305095  0.13468495  1.0619599
 -0.45133268  0.06690304 -0.20400081 -0.04343973 -1.41555967  0.25109339
 -0.67997199  0.74021758 -0.38802517  0.77610058 -0.25891764 -0.54695971
 -1.08446389 -0.36615456 -0.47211447  1.87404364  1.39257513 -0.16230874
 -0.49177139  0.57589428 -0.31462395 -0.19382266 -0.55550508 -0.76775509
  0.68599124 -0.43454987 -0.90911658 -1.12203732  2.47890561  0.53350142
 -0.79747873  0.18813943 -0.53301349 -0.73949795  0.1822714  -0.25981235
 -0.86990325  0.72952474  0.16744712  2.01759315 -0.67869269  0.22068826
 -0.63022185 -0.33428973 -0.8975322  -0.32401759  0.98462339 -1.03887688
 -0.26133802 -0.81801884 -0.01595512  0.56248602  0.6516571  -0.43681309
 -0.13139792 -1.46866513 -0.22072119  0.68865769].
Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample.

